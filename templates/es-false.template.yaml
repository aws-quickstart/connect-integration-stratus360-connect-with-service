AWSTemplateFormatVersion: 2010-09-09
Parameters:
  QSS3BucketName:
    AllowedPattern: "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$"
    ConstraintDescription: "Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-)."
    Default: aws-quickstart
    Description: "S3 bucket name for the Quick Start assets. Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-)."
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: "^[0-9a-zA-Z-/]*$"
    ConstraintDescription: "Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/)."
    Default: quickstart-stratus360-connect-with-service/
    Description: "S3 key prefix for the Quick Start assets. Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/)."
    Type: String
  ContactFlowLogGroup:
    Default: ""
    Description: Amazon Connect contact flow Cloudwatch Logs group. Usually is of the form "/aws/connect/{instancealiasname}".
    Type: String
  LogS3KeyPrefix:
    AllowedPattern: "^[0-9a-zA-Z-/]*/$"
    ConstraintDescription: Key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/) and must end with a forward slash (/).
    Default: logs/
    Description: S3 key prefix for all logs. Key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/) and must end with a forward slash (/).
    Type: String
  AgentFirehoseS3KeyPrefix:
    AllowedPattern: "^[0-9a-zA-Z-]*$"
    ConstraintDescription: Key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and hyphens (-).
    Default: agent-firehose-output
    Description: S3 key prefix for the Agent logs. Non-empty key prefix can include numbers, lowercase letters, uppercase letters, and hyphens (-).
    MinLength: 1
    Type: String
  CtrFirehoseS3KeyPrefix:
    AllowedPattern: "^[0-9a-zA-Z-]*$"
    ConstraintDescription: Key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).
    Default: ctr-firehose-output
    Description: S3 key prefix for the CTR logs. Non-empty key prefix can include numbers, lowercase letters, uppercase letters, and hyphens (-).
    MinLength: 1
    Type: String
  ContactFlowS3KeyPrefix:
    AllowedPattern: "^[0-9a-zA-Z-]*$"
    ConstraintDescription: Key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).
    Default: contactflowlogs-output
    Description: S3 key prefix for the Agent logs. Non-empty key prefix can include numbers, lowercase letters, uppercase letters, and hyphens (-).
    MinLength: 1
    Type: String
  AgentKinesisStreamArn:
    Type: String
  CtrKinesisStreamArn:
    Type: String
  AmznConnectOutputBucketName:
    Type: String
  AmznConnectOutputBucketArn:
    Type: String
  CopyLambdaSourceBucket:
    Type: String
Conditions:
  ContactFlowLogGroupExists: !Not
    - !Equals
      - Ref: ContactFlowLogGroup
      - ""
  CtrDataStreamEnableBool: !Not [!Equals [!Ref CtrKinesisStreamArn, ""]]
Mappings:
  MakeRefTableConstants:
    InstanceValues:
      MakeRefTableDatabaseName: "quickstart-ref-database"
      MakeRefTableName: "quickstart-ref-table-ctr"
      MakeRefTableAgentName: "quickstart-ref-table-agent"
      MakeRefTableParamName: "/connect/quickstart/s360/makereftable/config"
      CrawlerDatabaseName: "quickstart-connect-log-database"
Resources:
  AgentFirehose:
    DependsOn: RefTableAgent
    Properties:
      DeliveryStreamType: KinesisStreamAsSource
      ExtendedS3DestinationConfiguration:
        DataFormatConversionConfiguration: 
          Enabled: True
          InputFormatConfiguration:
            Deserializer: 
              OpenXJsonSerDe: {}
          OutputFormatConfiguration:
            Serializer: 
              ParquetSerDe: {}
          SchemaConfiguration:
            CatalogId: !Ref "AWS::AccountId"
            DatabaseName: !FindInMap [MakeRefTableConstants, InstanceValues, MakeRefTableDatabaseName]
            Region: !Ref "AWS::Region"
            RoleARN: !GetAtt FirehoseRole.Arn
            TableName: !FindInMap [MakeRefTableConstants, InstanceValues, MakeRefTableAgentName]
            VersionId: LATEST
        BucketARN:
          Ref: AmznConnectOutputBucketArn
        Prefix: !Sub "${LogS3KeyPrefix}${AgentFirehoseS3KeyPrefix}/"
        CompressionFormat: UNCOMPRESSED 
        BufferingHints:
          IntervalInSeconds: 60
          SizeInMBs: 64
        RoleARN:
          Fn::GetAtt:
            - FirehoseRole
            - Arn
      KinesisStreamSourceConfiguration:
        KinesisStreamARN:
          Ref: AgentKinesisStreamArn
        RoleARN:
          Fn::GetAtt:
            - FirehoseRole
            - Arn
    Type: AWS::KinesisFirehose::DeliveryStream
  CtrFirehose:
    DependsOn: RefTableAgent
    Properties:
      DeliveryStreamType: !If [CtrDataStreamEnableBool, "KinesisStreamAsSource", "DirectPut"]
      ExtendedS3DestinationConfiguration:
        DataFormatConversionConfiguration:
          Enabled: True
          InputFormatConfiguration:
            Deserializer: 
              OpenXJsonSerDe: {}
          OutputFormatConfiguration:
            Serializer: 
              ParquetSerDe: {}
          SchemaConfiguration:
            CatalogId: !Ref "AWS::AccountId"
            DatabaseName: !FindInMap [MakeRefTableConstants, InstanceValues, MakeRefTableDatabaseName]
            Region: !Ref "AWS::Region"
            RoleARN: !GetAtt FirehoseRole.Arn
            TableName: !FindInMap [MakeRefTableConstants, InstanceValues, MakeRefTableName]
            VersionId: LATEST
        BucketARN:
          Ref: AmznConnectOutputBucketArn
        Prefix: !Sub "${LogS3KeyPrefix}${CtrFirehoseS3KeyPrefix}/"
        CompressionFormat: UNCOMPRESSED 
        BufferingHints:
          IntervalInSeconds: 60
          SizeInMBs: 64
        RoleARN:
          Fn::GetAtt:
            - FirehoseRole
            - Arn
      KinesisStreamSourceConfiguration:
        Fn::If:
          - CtrDataStreamEnableBool
          - KinesisStreamARN:
              Ref: CtrKinesisStreamArn
            RoleARN:
              Fn::GetAtt:
                - FirehoseRole
                - Arn
          - !Ref "AWS::NoValue"
    Type: AWS::KinesisFirehose::DeliveryStream
  CwLogsToS3Lambda:
    Properties:
      CodeUri:
        Bucket:
          Ref: CopyLambdaSourceBucket
        Key: !Sub ${QSS3KeyPrefix}functions/deploy-es-false-cwl-logs.zip
      Description: Sends Contact flow Cloudwatch logs to S3
      Environment:
        Variables:
          S3_BUCKET:
            Ref: AmznConnectOutputBucketName
          S3_PREFIX: !Sub "${LogS3KeyPrefix}${ContactFlowS3KeyPrefix}/"
      Handler: index.handler
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - CwLogsToS3LambdaRole
          - Arn
      Runtime: nodejs12.x
      Timeout: 300
    Type: AWS::Serverless::Function
  ContactFlowLogFilter:
    Condition: ContactFlowLogGroupExists
    DependsOn: CwLogsToS3LambdaInvoke
    Properties:
      DestinationArn:
        Fn::GetAtt:
          - CwLogsToS3Lambda
          - Arn
      FilterPattern: ""
      LogGroupName:
        Ref: ContactFlowLogGroup
    Type: AWS::Logs::SubscriptionFilter
  CwLogsToS3LambdaInvoke:
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - CwLogsToS3Lambda
          - Arn
      Principal:
        Fn::Join:
          - ""
          - - logs.
            - Ref: AWS::Region
            - .amazonaws.com
      SourceAccount:
        Ref: AWS::AccountId
      SourceArn:
        Fn::Join:
          - ":"
          - - arn:aws:logs
            - Ref: AWS::Region
            - Ref: AWS::AccountId
            - log-group
            - Ref: ContactFlowLogGroup
            - "*"
    Type: AWS::Lambda::Permission
  CwLogsToS3LambdaRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
        Version: 2012-10-17
      Path: /
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:GetLogEvents
                  - logs:DescribeLogStreams
                Effect: Allow
                Resource:
                  - arn:aws:logs:*:*:*
              - Action:
                  - s3:AbortMultipartUpload
                  - s3:GetBucketLocation
                  - s3:GetObject
                  - s3:ListBucket
                  - s3:ListBucketMultipartUploads
                  - s3:PutObject
                Effect: Allow
                Resource:
                  - Ref: AmznConnectOutputBucketArn
                  - Fn::Join:
                      - /
                      - - Ref: AmznConnectOutputBucketArn
                        - "*"
            Version: 2012-10-17
          PolicyName: amznConnect-logsToS3Policy
    Type: AWS::IAM::Role
  FirehoseRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Condition:
              StringEquals:
                sts:ExternalId:
                  Ref: AWS::AccountId
            Effect: Allow
            Principal:
              Service:
                - firehose.amazonaws.com
        Version: 2012-10-17
      Path: /
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - s3:AbortMultipartUpload
                  - s3:GetBucketLocation
                  - s3:GetObject
                  - s3:ListBucket
                  - s3:ListBucketMultipartUploads
                  - s3:PutObject
                Effect: Allow
                Resource:
                  - Ref: AmznConnectOutputBucketArn
                  - Fn::Join:
                      - /
                      - - Ref: AmznConnectOutputBucketArn
                        - "*"
              - Action:
                  - kinesis:DescribeStream
                  - kinesis:GetShardIterator
                  - kinesis:GetRecords
                Effect: Allow
                Resource:
                  - Ref: AgentKinesisStreamArn
                  - !If [CtrDataStreamEnableBool, !Ref CtrKinesisStreamArn, !Ref "AWS::NoValue"]
              - Action:
                  - kms:Decrypt
                Condition:
                  StringEquals:
                    kms:ViaService:
                      Fn::Join:
                        - .
                        - - kinesis
                          - Ref: AWS::Region
                          - amazonaws.com
                  StringLike:
                    kms:EncryptionContext:aws:kinesis:arn:
                      - Ref: AgentKinesisStreamArn
                Effect: Allow
                Resource: arn:aws:kms:region:accountid:key/%SSE_KEY_ARN%\
              - Action:
                  - glue:GetTableVersions
                Effect: Allow
                Resource:
                  - !Sub arn:aws:glue:${AWS::Region}:${AWS::AccountId}:catalog
                  - !Sub 
                    - arn:aws:glue:${AWS::Region}:${AWS::AccountId}:database/${MakeRefTableDatabaseNameSub}
                    - MakeRefTableDatabaseNameSub: !FindInMap [MakeRefTableConstants, InstanceValues, MakeRefTableDatabaseName]
                  - !Sub 
                    - arn:aws:glue:${AWS::Region}:${AWS::AccountId}:table/${MakeRefTableDatabaseNameSub}/${MakeRefTableNameSub}
                    - MakeRefTableDatabaseNameSub: !FindInMap [MakeRefTableConstants, InstanceValues, MakeRefTableDatabaseName]
                      MakeRefTableNameSub: !FindInMap [MakeRefTableConstants, InstanceValues, MakeRefTableName]
                  - !Sub 
                    - arn:aws:glue:${AWS::Region}:${AWS::AccountId}:table/${MakeRefTableDatabaseNameSub}/${MakeRefTableAgentNameSub}
                    - MakeRefTableDatabaseNameSub: !FindInMap [MakeRefTableConstants, InstanceValues, MakeRefTableDatabaseName]
                      MakeRefTableAgentNameSub: !FindInMap [MakeRefTableConstants, InstanceValues, MakeRefTableAgentName]
            Version: 2012-10-17
          PolicyName: amznConnect-firehoseRolePolicy
    Type: AWS::IAM::Role
  MakeRefTableLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref CopyLambdaSourceBucket
        S3Key: !Sub ${QSS3KeyPrefix}functions/create-ref-table.zip
      Description: Makes a reference Glue Table with a dumby schema for Firehose to use in order to output in parquet format
      Environment:
        Variables:
          REF_DATABASE_NAME: !FindInMap [MakeRefTableConstants, InstanceValues, MakeRefTableDatabaseName] 
          REF_TABLE_NAME: !FindInMap [MakeRefTableConstants, InstanceValues, MakeRefTableName] 
          SSM_PARAM_ATTRIBUTES_PATH: !FindInMap [MakeRefTableConstants, InstanceValues, MakeRefTableParamName] 
      Handler: create-ref-table.lambda_handler
      MemorySize: 128
      Role: !GetAtt MakeRefTableLambdaRole.Arn
      Runtime: python3.8
      Timeout: 10
  MakeRefTableLambdaCWRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Trigger MakeRefTableLambda upon param update
      EventPattern: 
        !Sub 
          - '{"source":["aws.ssm"],"detail-type":["Parameter Store Change"],"detail":{"name":["${MakeRefTableParamNameSub}"],"operation":["Create","Update","LabelParameterVersion"]}}'
          - MakeRefTableParamNameSub: !FindInMap [MakeRefTableConstants, InstanceValues, MakeRefTableParamName]
      Targets:
        - Arn: !GetAtt MakeRefTableLambda.Arn
          Id: !Ref MakeRefTableLambda
  MakeRefTableLambdaInvoke:
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref MakeRefTableLambda
      Principal: events.amazonaws.com
      SourceArn: !GetAtt MakeRefTableLambdaCWRule.Arn
    Type: AWS::Lambda::Permission
  MakeRefTableLambdaRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
        Version: 2012-10-17
      Path: /
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
        - PolicyName: Quickstart-Connect-Read-Params-Ref-Glue-Table-Perms
          PolicyDocument:
            Statement:
              - Action:
                  - ssm:GetParameter
                Effect: Allow
                Resource:
                  - !Sub
                      - arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${MakeRefTableParamNameSub}
                      - MakeRefTableParamNameSub: !FindInMap [MakeRefTableConstants, InstanceValues, MakeRefTableParamName]
            Version: 2012-10-17
        - PolicyName: Quickstart-Connect-Create-Ref-Glue-Table-Perms
          PolicyDocument:
            Statement:
              - Action:
                  - glue:CreateTable
                  - glue:GetTables
                  - glue:UpdateTable
                  - glue:GetDatabases
                  - glue:CreateDatabase
                Effect: Allow
                Resource:
                  - !Sub arn:aws:glue:${AWS::Region}:${AWS::AccountId}:catalog
                  - !Sub 
                    - arn:aws:glue:${AWS::Region}:${AWS::AccountId}:database/${MakeRefTableDatabaseNameSub}
                    - MakeRefTableDatabaseNameSub: !FindInMap [MakeRefTableConstants, InstanceValues, MakeRefTableDatabaseName]
                  - !Sub 
                    - arn:aws:glue:${AWS::Region}:${AWS::AccountId}:table/${MakeRefTableDatabaseNameSub}/${MakeRefTableNameSub}
                    - MakeRefTableDatabaseNameSub: !FindInMap [MakeRefTableConstants, InstanceValues, MakeRefTableDatabaseName]
                      MakeRefTableNameSub: !FindInMap [MakeRefTableConstants, InstanceValues, MakeRefTableName]
            Version: 2012-10-17
    Type: AWS::IAM::Role
  MakeRefTableParam:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !FindInMap [MakeRefTableConstants, InstanceValues, MakeRefTableParamName]
      Description: "Config for MakeRefTableLambda script"
      Type: String
      Value: "comma,seperated,call,attribute,list"
  RefTable:
    DependsOn: RefTableDatabase
    Type: AWS::Glue::Table
    Properties: 
      CatalogId: !Ref AWS::AccountId
      DatabaseName: !FindInMap [MakeRefTableConstants, InstanceValues, MakeRefTableDatabaseName]
      TableInput: 
        Name: !FindInMap [MakeRefTableConstants, InstanceValues, MakeRefTableName]
        Description: Reference table for Amazon Connect data logging solution (CTR Logs)
        StorageDescriptor:
          Columns:
            - Name: awsaccountid
              Type: string
            - Name: awscontacttracerecordformatversion
              Type: string
            - Name: agent
              Type: struct<ARN:string,AfterContactWorkDuration:int,AfterContactWorkEndTimestamp:string,AfterContactWorkStartTimestamp:string,AgentInteractionDuration:int,ConnectedToAgentTimestamp:string,CustomerHoldDuration:int,HierarchyGroups:string,LongestHoldDuration:int,NumberOfHolds:int,RoutingProfile:struct<ARN:string,Name:string>,Username:string>
            - Name: agentconnectionattempts
              Type: int
            - Name: attributes
              Type: struct<comma:string,seperated:string,call:string,attribute:string,list:string>
            - Name: channel
              Type: string
            - Name: connectedtosystemtimestamp
              Type: string
            - Name: contactid
              Type: string
            - Name: customerendpoint
              Type: struct<Address:string,Type:string>
            - Name: disconnecttimestamp
              Type: string
            - Name: initialcontactid
              Type: string
            - Name: initiationmethod
              Type: string
            - Name: initiationtimestamp
              Type: string
            - Name: instancearn
              Type: string
            - Name: lastupdatetimestamp
              Type: string
            - Name: mediastreams
              Type: array<struct<Type:string>>
            - Name: nextcontactid
              Type: string
            - Name: previouscontactid
              Type: string
            - Name: queue
              Type: struct<ARN:string,DequeueTimestamp:string,Duration:int,EnqueueTimestamp:string,Name:string>
            - Name: recording
              Type: struct<DeletionReason:string,Location:string,Status:string,Type:string>
            - Name: recordings
              Type: array<struct<DeletionReason:string,FragmentStartNumber:string,FragmentStopNumber:string,Location:string,MediaStreamType:string,ParticipantType:string,StartTimestamp:string,Status:string,StopTimestamp:string,StorageType:string>>
            - Name: systemendpoint
              Type: struct<Address:string,Type:string>
            - Name: transfercompletedtimestamp
              Type: string
            - Name: transferredtoendpoint
              Type: string
  RefTableAgent:
    DependsOn: RefTableDatabase
    Type: AWS::Glue::Table
    Properties: 
      CatalogId: !Ref AWS::AccountId
      DatabaseName: !FindInMap [MakeRefTableConstants, InstanceValues, MakeRefTableDatabaseName]
      TableInput: 
        Name: !FindInMap [MakeRefTableConstants, InstanceValues, MakeRefTableAgentName]
        Description: Reference table for Amazon Connect data logging solution (Agent Logs)
        StorageDescriptor: 
          Columns:
            - Name: awsaccountid
              Type: string
            - Name: agentarn
              Type: string
            - Name: currentagentsnapshot
              Type: struct<AgentStatus:struct<ARN:string,Name:string,StartTimestamp:string>,Configuration:struct<AgentHierarchyGroups:string,FirstName:string,LastName:string,RoutingProfile:struct<ARN:string,Concurrency:array<struct<AvailableSlots:int,Channel:string,MaximumSlots:int>>,DefaultOutboundQueue:struct<ARN:string,Channels:array<string>,Name:string>,InboundQueues:array<struct<ARN:string,Channels:array<string>,Name:string>>,Name:string>,Username:string>,Contacts:array<struct<Channel:string,ConnectedToAgentTimestamp:string,ContactId:string,InitialContactId:string,InitiationMethod:string,Queue:struct<ARN:string,Name:string>,QueueTimestamp:string,State:string,StateStartTimestamp:string>>>
            - Name: eventid
              Type: string
            - Name: eventtimestamp
              Type: string
            - Name: eventtype
              Type: string
            - Name: instancearn
              Type: string
            - Name: previousagentsnapshot
              Type: struct<AgentStatus:struct<ARN:string,Name:string,StartTimestamp:string>,Configuration:struct<AgentHierarchyGroups:string,FirstName:string,LastName:string,RoutingProfile:struct<ARN:string,Concurrency:array<struct<AvailableSlots:int,Channel:string,MaximumSlots:int>>,DefaultOutboundQueue:struct<ARN:string,Channels:array<string>,Name:string>,InboundQueues:array<struct<ARN:string,Channels:array<string>,Name:string>>,Name:string>,Username:string>,Contacts:array<struct<Channel:string,ConnectedToAgentTimestamp:string,ContactId:string,InitialContactId:string,InitiationMethod:string,Queue:struct<ARN:string,Name:string>,QueueTimestamp:string,State:string,StateStartTimestamp:string>>>
            - Name: version
              Type: string
  RefTableDatabase:
    Type: AWS::Glue::Database
    Properties: 
      CatalogId: !Ref AWS::AccountId
      DatabaseInput: 
        Name: !FindInMap [MakeRefTableConstants, InstanceValues, MakeRefTableDatabaseName]
        Description: Reference database for Amazon Connect data logging solution
  CrawlerDatabase:
    Type: AWS::Glue::Database
    Properties: 
      CatalogId: !Ref AWS::AccountId
      DatabaseInput: 
        Name: !FindInMap [MakeRefTableConstants, InstanceValues, CrawlerDatabaseName]
        Description: Database for Amazon Connect data logging solution
  GlueCrawler:
    DependsOn: CrawlerDatabase
    Type: AWS::Glue::Crawler
    Properties: 
      DatabaseName: !FindInMap [MakeRefTableConstants, InstanceValues, CrawlerDatabaseName]
      Description: Crawler for Amazon Connect QuickStart Logging solution
      Role: !GetAtt GlueCrawlerRole.Arn
      Schedule: 
        ScheduleExpression: "cron(0/5 * * * ? *)"
      Targets: 
        S3Targets:
          - Path: !Sub "${AmznConnectOutputBucketName}/${LogS3KeyPrefix}"
  GlueCrawlerRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - glue.amazonaws.com
        Version: 2012-10-17
      Path: /
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole"
      Policies:
        - PolicyName: Quickstart-Connect-Crawler-S3-Perms
          PolicyDocument:
            Statement:
              - Action:
                  - s3:GetObject
                  - s3:PutObject
                Effect: Allow
                Resource:
                  - Ref: AmznConnectOutputBucketArn
                  - Fn::Join:
                      - /
                      - - Ref: AmznConnectOutputBucketArn
                        - "*"
            Version: 2012-10-17
    Type: AWS::IAM::Role
Transform: AWS::Serverless-2016-10-31
